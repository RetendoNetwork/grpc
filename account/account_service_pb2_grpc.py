# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import exchange_token_for_user_data_pb2 as exchange__token__for__user__data__pb2
import get_nex_data_rpc_pb2 as get__nex__data__rpc__pb2
import get_nex_password_rpc_pb2 as get__nex__password__rpc__pb2
import get_user_data_rpc_pb2 as get__user__data__rpc__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import update_rnid_permissions_pb2 as update__rnid__permissions__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in account_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AccountStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUserData = channel.unary_unary(
                '/account.Account/GetUserData',
                request_serializer=get__user__data__rpc__pb2.GetUserDataRequest.SerializeToString,
                response_deserializer=get__user__data__rpc__pb2.GetUserDataResponse.FromString,
                _registered_method=True)
        self.GetNEXPassword = channel.unary_unary(
                '/account.Account/GetNEXPassword',
                request_serializer=get__nex__password__rpc__pb2.GetNEXPasswordRequest.SerializeToString,
                response_deserializer=get__nex__password__rpc__pb2.GetNEXPasswordResponse.FromString,
                _registered_method=True)
        self.GetNEXData = channel.unary_unary(
                '/account.Account/GetNEXData',
                request_serializer=get__nex__data__rpc__pb2.GetNEXDataRequest.SerializeToString,
                response_deserializer=get__nex__data__rpc__pb2.GetNEXDataResponse.FromString,
                _registered_method=True)
        self.UpdateRNIDPermissions = channel.unary_unary(
                '/account.Account/UpdateRNIDPermissions',
                request_serializer=update__rnid__permissions__pb2.UpdateRNIDPermissionsRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.ExchangeTokenForUserData = channel.unary_unary(
                '/account.Account/ExchangeTokenForUserData',
                request_serializer=exchange__token__for__user__data__pb2.ExchangeTokenForUserDataRequest.SerializeToString,
                response_deserializer=get__user__data__rpc__pb2.GetUserDataResponse.FromString,
                _registered_method=True)


class AccountServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetUserData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNEXPassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNEXData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRNIDPermissions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExchangeTokenForUserData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AccountServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUserData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserData,
                    request_deserializer=get__user__data__rpc__pb2.GetUserDataRequest.FromString,
                    response_serializer=get__user__data__rpc__pb2.GetUserDataResponse.SerializeToString,
            ),
            'GetNEXPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNEXPassword,
                    request_deserializer=get__nex__password__rpc__pb2.GetNEXPasswordRequest.FromString,
                    response_serializer=get__nex__password__rpc__pb2.GetNEXPasswordResponse.SerializeToString,
            ),
            'GetNEXData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNEXData,
                    request_deserializer=get__nex__data__rpc__pb2.GetNEXDataRequest.FromString,
                    response_serializer=get__nex__data__rpc__pb2.GetNEXDataResponse.SerializeToString,
            ),
            'UpdateRNIDPermissions': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRNIDPermissions,
                    request_deserializer=update__rnid__permissions__pb2.UpdateRNIDPermissionsRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ExchangeTokenForUserData': grpc.unary_unary_rpc_method_handler(
                    servicer.ExchangeTokenForUserData,
                    request_deserializer=exchange__token__for__user__data__pb2.ExchangeTokenForUserDataRequest.FromString,
                    response_serializer=get__user__data__rpc__pb2.GetUserDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'account.Account', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('account.Account', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Account(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetUserData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/account.Account/GetUserData',
            get__user__data__rpc__pb2.GetUserDataRequest.SerializeToString,
            get__user__data__rpc__pb2.GetUserDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNEXPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/account.Account/GetNEXPassword',
            get__nex__password__rpc__pb2.GetNEXPasswordRequest.SerializeToString,
            get__nex__password__rpc__pb2.GetNEXPasswordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNEXData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/account.Account/GetNEXData',
            get__nex__data__rpc__pb2.GetNEXDataRequest.SerializeToString,
            get__nex__data__rpc__pb2.GetNEXDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateRNIDPermissions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/account.Account/UpdateRNIDPermissions',
            update__rnid__permissions__pb2.UpdateRNIDPermissionsRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExchangeTokenForUserData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/account.Account/ExchangeTokenForUserData',
            exchange__token__for__user__data__pb2.ExchangeTokenForUserDataRequest.SerializeToString,
            get__user__data__rpc__pb2.GetUserDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
